/*!
 * The MIT License (MIT)
 * 
 * Copyright (c) 2017 CloudStrap AD
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE distributed under the MIT license.
 * 
 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("SashidoResponsive",[],t):"object"==typeof exports?exports.SashidoResponsive=t():e.SashidoResponsive=t()}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var i=r[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var r={};return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=2)}([function(e,t,r){var n;(function(){function r(e){return function(t,r,n,i){r=x(r,i,4);var s=!O(t)&&w.keys(t),o=(s||t).length,a=e>0?0:o-1;return arguments.length<3&&(n=t[s?s[a]:a],a+=e),function(t,r,n,i,s,o){for(;s>=0&&s<o;s+=e){var a=i?i[s]:s;n=r(n,t[a],a,t)}return n}(t,r,n,s,a,o)}}function i(e){return function(t,r,n){r=P(r,n);for(var i=S(t),s=e>0?0:i-1;s>=0&&s<i;s+=e)if(r(t[s],s,t))return s;return-1}}function s(e,t,r){return function(n,i,s){var o=0,a=S(n);if("number"==typeof s)e>0?o=s>=0?s:Math.max(s+a,o):a=s>=0?Math.min(s+1,a):s+a+1;else if(r&&s&&a)return s=r(n,i),n[s]===i?s:-1;if(i!=i)return(s=t(h.call(n,o,a),w.isNaN))>=0?s+o:-1;for(s=e>0?o:a-1;s>=0&&s<a;s+=e)if(n[s]===i)return s;return-1}}function o(e,t){var r=z.length,n=e.constructor,i=w.isFunction(n)&&n.prototype||c,s="constructor";for(w.has(e,s)&&!w.contains(t,s)&&t.push(s);r--;)(s=z[r])in e&&e[s]!==i[s]&&!w.contains(t,s)&&t.push(s)}var a=this,u=a._,l=Array.prototype,c=Object.prototype,f=Function.prototype,p=l.push,h=l.slice,v=c.toString,d=c.hasOwnProperty,m=Array.isArray,g=Object.keys,y=f.bind,_=Object.create,b=function(){},w=function(e){return e instanceof w?e:this instanceof w?void(this._wrapped=e):new w(e)};void 0!==e&&e.exports&&(t=e.exports=w),t._=w,w.VERSION="1.8.3";var x=function(e,t,r){if(void 0===t)return e;switch(null==r?3:r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,i){return e.call(t,r,n,i)};case 4:return function(r,n,i,s){return e.call(t,r,n,i,s)}}return function(){return e.apply(t,arguments)}},P=function(e,t,r){return null==e?w.identity:w.isFunction(e)?x(e,t,r):w.isObject(e)?w.matcher(e):w.property(e)};w.iteratee=function(e,t){return P(e,t,1/0)};var E=function(e,t){return function(r){var n=arguments.length;if(n<2||null==r)return r;for(var i=1;i<n;i++)for(var s=arguments[i],o=e(s),a=o.length,u=0;u<a;u++){var l=o[u];t&&void 0!==r[l]||(r[l]=s[l])}return r}},A=function(e){if(!w.isObject(e))return{};if(_)return _(e);b.prototype=e;var t=new b;return b.prototype=null,t},j=function(e){return function(t){return null==t?void 0:t[e]}},L=Math.pow(2,53)-1,S=j("length"),O=function(e){var t=S(e);return"number"==typeof t&&t>=0&&t<=L};w.each=w.forEach=function(e,t,r){t=x(t,r);var n,i;if(O(e))for(n=0,i=e.length;n<i;n++)t(e[n],n,e);else{var s=w.keys(e);for(n=0,i=s.length;n<i;n++)t(e[s[n]],s[n],e)}return e},w.map=w.collect=function(e,t,r){t=P(t,r);for(var n=!O(e)&&w.keys(e),i=(n||e).length,s=Array(i),o=0;o<i;o++){var a=n?n[o]:o;s[o]=t(e[a],a,e)}return s},w.reduce=w.foldl=w.inject=r(1),w.reduceRight=w.foldr=r(-1),w.find=w.detect=function(e,t,r){var n;if(void 0!==(n=O(e)?w.findIndex(e,t,r):w.findKey(e,t,r))&&-1!==n)return e[n]},w.filter=w.select=function(e,t,r){var n=[];return t=P(t,r),w.each(e,function(e,r,i){t(e,r,i)&&n.push(e)}),n},w.reject=function(e,t,r){return w.filter(e,w.negate(P(t)),r)},w.every=w.all=function(e,t,r){t=P(t,r);for(var n=!O(e)&&w.keys(e),i=(n||e).length,s=0;s<i;s++){var o=n?n[s]:s;if(!t(e[o],o,e))return!1}return!0},w.some=w.any=function(e,t,r){t=P(t,r);for(var n=!O(e)&&w.keys(e),i=(n||e).length,s=0;s<i;s++){var o=n?n[s]:s;if(t(e[o],o,e))return!0}return!1},w.contains=w.includes=w.include=function(e,t,r,n){return O(e)||(e=w.values(e)),("number"!=typeof r||n)&&(r=0),w.indexOf(e,t,r)>=0},w.invoke=function(e,t){var r=h.call(arguments,2),n=w.isFunction(t);return w.map(e,function(e){var i=n?t:e[t];return null==i?i:i.apply(e,r)})},w.pluck=function(e,t){return w.map(e,w.property(t))},w.where=function(e,t){return w.filter(e,w.matcher(t))},w.findWhere=function(e,t){return w.find(e,w.matcher(t))},w.max=function(e,t,r){var n,i,s=-1/0,o=-1/0;if(null==t&&null!=e)for(var a=0,u=(e=O(e)?e:w.values(e)).length;a<u;a++)(n=e[a])>s&&(s=n);else t=P(t,r),w.each(e,function(e,r,n){((i=t(e,r,n))>o||i===-1/0&&s===-1/0)&&(s=e,o=i)});return s},w.min=function(e,t,r){var n,i,s=1/0,o=1/0;if(null==t&&null!=e)for(var a=0,u=(e=O(e)?e:w.values(e)).length;a<u;a++)(n=e[a])<s&&(s=n);else t=P(t,r),w.each(e,function(e,r,n){((i=t(e,r,n))<o||i===1/0&&s===1/0)&&(s=e,o=i)});return s},w.shuffle=function(e){for(var t,r=O(e)?e:w.values(e),n=r.length,i=Array(n),s=0;s<n;s++)(t=w.random(0,s))!==s&&(i[s]=i[t]),i[t]=r[s];return i},w.sample=function(e,t,r){return null==t||r?(O(e)||(e=w.values(e)),e[w.random(e.length-1)]):w.shuffle(e).slice(0,Math.max(0,t))},w.sortBy=function(e,t,r){return t=P(t,r),w.pluck(w.map(e,function(e,r,n){return{value:e,index:r,criteria:t(e,r,n)}}).sort(function(e,t){var r=e.criteria,n=t.criteria;if(r!==n){if(r>n||void 0===r)return 1;if(r<n||void 0===n)return-1}return e.index-t.index}),"value")};var k=function(e){return function(t,r,n){var i={};return r=P(r,n),w.each(t,function(n,s){var o=r(n,s,t);e(i,n,o)}),i}};w.groupBy=k(function(e,t,r){w.has(e,r)?e[r].push(t):e[r]=[t]}),w.indexBy=k(function(e,t,r){e[r]=t}),w.countBy=k(function(e,t,r){w.has(e,r)?e[r]++:e[r]=1}),w.toArray=function(e){return e?w.isArray(e)?h.call(e):O(e)?w.map(e,w.identity):w.values(e):[]},w.size=function(e){return null==e?0:O(e)?e.length:w.keys(e).length},w.partition=function(e,t,r){t=P(t,r);var n=[],i=[];return w.each(e,function(e,r,s){(t(e,r,s)?n:i).push(e)}),[n,i]},w.first=w.head=w.take=function(e,t,r){if(null!=e)return null==t||r?e[0]:w.initial(e,e.length-t)},w.initial=function(e,t,r){return h.call(e,0,Math.max(0,e.length-(null==t||r?1:t)))},w.last=function(e,t,r){if(null!=e)return null==t||r?e[e.length-1]:w.rest(e,Math.max(0,e.length-t))},w.rest=w.tail=w.drop=function(e,t,r){return h.call(e,null==t||r?1:t)},w.compact=function(e){return w.filter(e,w.identity)};var I=function(e,t,r,n){for(var i=[],s=0,o=n||0,a=S(e);o<a;o++){var u=e[o];if(O(u)&&(w.isArray(u)||w.isArguments(u))){t||(u=I(u,t,r));var l=0,c=u.length;for(i.length+=c;l<c;)i[s++]=u[l++]}else r||(i[s++]=u)}return i};w.flatten=function(e,t){return I(e,t,!1)},w.without=function(e){return w.difference(e,h.call(arguments,1))},w.uniq=w.unique=function(e,t,r,n){w.isBoolean(t)||(n=r,r=t,t=!1),null!=r&&(r=P(r,n));for(var i=[],s=[],o=0,a=S(e);o<a;o++){var u=e[o],l=r?r(u,o,e):u;t?(o&&s===l||i.push(u),s=l):r?w.contains(s,l)||(s.push(l),i.push(u)):w.contains(i,u)||i.push(u)}return i},w.union=function(){return w.uniq(I(arguments,!0,!0))},w.intersection=function(e){for(var t=[],r=arguments.length,n=0,i=S(e);n<i;n++){var s=e[n];if(!w.contains(t,s)){for(var o=1;o<r&&w.contains(arguments[o],s);o++);o===r&&t.push(s)}}return t},w.difference=function(e){var t=I(arguments,!0,!0,1);return w.filter(e,function(e){return!w.contains(t,e)})},w.zip=function(){return w.unzip(arguments)},w.unzip=function(e){for(var t=e&&w.max(e,S).length||0,r=Array(t),n=0;n<t;n++)r[n]=w.pluck(e,n);return r},w.object=function(e,t){for(var r={},n=0,i=S(e);n<i;n++)t?r[e[n]]=t[n]:r[e[n][0]]=e[n][1];return r},w.findIndex=i(1),w.findLastIndex=i(-1),w.sortedIndex=function(e,t,r,n){for(var i=(r=P(r,n,1))(t),s=0,o=S(e);s<o;){var a=Math.floor((s+o)/2);r(e[a])<i?s=a+1:o=a}return s},w.indexOf=s(1,w.findIndex,w.sortedIndex),w.lastIndexOf=s(-1,w.findLastIndex),w.range=function(e,t,r){null==t&&(t=e||0,e=0),r=r||1;for(var n=Math.max(Math.ceil((t-e)/r),0),i=Array(n),s=0;s<n;s++,e+=r)i[s]=e;return i};var U=function(e,t,r,n,i){if(!(n instanceof t))return e.apply(r,i);var s=A(e.prototype),o=e.apply(s,i);return w.isObject(o)?o:s};w.bind=function(e,t){if(y&&e.bind===y)return y.apply(e,h.call(arguments,1));if(!w.isFunction(e))throw new TypeError("Bind must be called on a function");var r=h.call(arguments,2),n=function(){return U(e,n,t,this,r.concat(h.call(arguments)))};return n},w.partial=function(e){var t=h.call(arguments,1),r=function(){for(var n=0,i=t.length,s=Array(i),o=0;o<i;o++)s[o]=t[o]===w?arguments[n++]:t[o];for(;n<arguments.length;)s.push(arguments[n++]);return U(e,r,this,this,s)};return r},w.bindAll=function(e){var t,r,n=arguments.length;if(n<=1)throw new Error("bindAll must be passed function names");for(t=1;t<n;t++)e[r=arguments[t]]=w.bind(e[r],e);return e},w.memoize=function(e,t){var r=function(n){var i=r.cache,s=""+(t?t.apply(this,arguments):n);return w.has(i,s)||(i[s]=e.apply(this,arguments)),i[s]};return r.cache={},r},w.delay=function(e,t){var r=h.call(arguments,2);return setTimeout(function(){return e.apply(null,r)},t)},w.defer=w.partial(w.delay,w,1),w.throttle=function(e,t,r){var n,i,s,o=null,a=0;r||(r={});var u=function(){a=!1===r.leading?0:w.now(),o=null,s=e.apply(n,i),o||(n=i=null)};return function(){var l=w.now();a||!1!==r.leading||(a=l);var c=t-(l-a);return n=this,i=arguments,c<=0||c>t?(o&&(clearTimeout(o),o=null),a=l,s=e.apply(n,i),o||(n=i=null)):o||!1===r.trailing||(o=setTimeout(u,c)),s}},w.debounce=function(e,t,r){var n,i,s,o,a,u=function(){var l=w.now()-o;l<t&&l>=0?n=setTimeout(u,t-l):(n=null,r||(a=e.apply(s,i),n||(s=i=null)))};return function(){s=this,i=arguments,o=w.now();var l=r&&!n;return n||(n=setTimeout(u,t)),l&&(a=e.apply(s,i),s=i=null),a}},w.wrap=function(e,t){return w.partial(t,e)},w.negate=function(e){return function(){return!e.apply(this,arguments)}},w.compose=function(){var e=arguments,t=e.length-1;return function(){for(var r=t,n=e[t].apply(this,arguments);r--;)n=e[r].call(this,n);return n}},w.after=function(e,t){return function(){if(--e<1)return t.apply(this,arguments)}},w.before=function(e,t){var r;return function(){return--e>0&&(r=t.apply(this,arguments)),e<=1&&(t=null),r}},w.once=w.partial(w.before,2);var R=!{toString:null}.propertyIsEnumerable("toString"),z=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];w.keys=function(e){if(!w.isObject(e))return[];if(g)return g(e);var t=[];for(var r in e)w.has(e,r)&&t.push(r);return R&&o(e,t),t},w.allKeys=function(e){if(!w.isObject(e))return[];var t=[];for(var r in e)t.push(r);return R&&o(e,t),t},w.values=function(e){for(var t=w.keys(e),r=t.length,n=Array(r),i=0;i<r;i++)n[i]=e[t[i]];return n},w.mapObject=function(e,t,r){t=P(t,r);for(var n,i=w.keys(e),s=i.length,o={},a=0;a<s;a++)o[n=i[a]]=t(e[n],n,e);return o},w.pairs=function(e){for(var t=w.keys(e),r=t.length,n=Array(r),i=0;i<r;i++)n[i]=[t[i],e[t[i]]];return n},w.invert=function(e){for(var t={},r=w.keys(e),n=0,i=r.length;n<i;n++)t[e[r[n]]]=r[n];return t},w.functions=w.methods=function(e){var t=[];for(var r in e)w.isFunction(e[r])&&t.push(r);return t.sort()},w.extend=E(w.allKeys),w.extendOwn=w.assign=E(w.keys),w.findKey=function(e,t,r){t=P(t,r);for(var n,i=w.keys(e),s=0,o=i.length;s<o;s++)if(n=i[s],t(e[n],n,e))return n},w.pick=function(e,t,r){var n,i,s={},o=e;if(null==o)return s;w.isFunction(t)?(i=w.allKeys(o),n=x(t,r)):(i=I(arguments,!1,!1,1),n=function(e,t,r){return t in r},o=Object(o));for(var a=0,u=i.length;a<u;a++){var l=i[a],c=o[l];n(c,l,o)&&(s[l]=c)}return s},w.omit=function(e,t,r){if(w.isFunction(t))t=w.negate(t);else{var n=w.map(I(arguments,!1,!1,1),String);t=function(e,t){return!w.contains(n,t)}}return w.pick(e,t,r)},w.defaults=E(w.allKeys,!0),w.create=function(e,t){var r=A(e);return t&&w.extendOwn(r,t),r},w.clone=function(e){return w.isObject(e)?w.isArray(e)?e.slice():w.extend({},e):e},w.tap=function(e,t){return t(e),e},w.isMatch=function(e,t){var r=w.keys(t),n=r.length;if(null==e)return!n;for(var i=Object(e),s=0;s<n;s++){var o=r[s];if(t[o]!==i[o]||!(o in i))return!1}return!0};var M=function(e,t,r,n){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return e===t;e instanceof w&&(e=e._wrapped),t instanceof w&&(t=t._wrapped);var i=v.call(e);if(i!==v.call(t))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t}var s="[object Array]"===i;if(!s){if("object"!=typeof e||"object"!=typeof t)return!1;var o=e.constructor,a=t.constructor;if(o!==a&&!(w.isFunction(o)&&o instanceof o&&w.isFunction(a)&&a instanceof a)&&"constructor"in e&&"constructor"in t)return!1}r=r||[],n=n||[];for(var u=r.length;u--;)if(r[u]===e)return n[u]===t;if(r.push(e),n.push(t),s){if((u=e.length)!==t.length)return!1;for(;u--;)if(!M(e[u],t[u],r,n))return!1}else{var l,c=w.keys(e);if(u=c.length,w.keys(t).length!==u)return!1;for(;u--;)if(l=c[u],!w.has(t,l)||!M(e[l],t[l],r,n))return!1}return r.pop(),n.pop(),!0};w.isEqual=function(e,t){return M(e,t)},w.isEmpty=function(e){return null==e||(O(e)&&(w.isArray(e)||w.isString(e)||w.isArguments(e))?0===e.length:0===w.keys(e).length)},w.isElement=function(e){return!(!e||1!==e.nodeType)},w.isArray=m||function(e){return"[object Array]"===v.call(e)},w.isObject=function(e){var t=typeof e;return"function"===t||"object"===t&&!!e},w.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(e){w["is"+e]=function(t){return v.call(t)==="[object "+e+"]"}}),w.isArguments(arguments)||(w.isArguments=function(e){return w.has(e,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(w.isFunction=function(e){return"function"==typeof e||!1}),w.isFinite=function(e){return isFinite(e)&&!isNaN(parseFloat(e))},w.isNaN=function(e){return w.isNumber(e)&&e!==+e},w.isBoolean=function(e){return!0===e||!1===e||"[object Boolean]"===v.call(e)},w.isNull=function(e){return null===e},w.isUndefined=function(e){return void 0===e},w.has=function(e,t){return null!=e&&d.call(e,t)},w.noConflict=function(){return a._=u,this},w.identity=function(e){return e},w.constant=function(e){return function(){return e}},w.noop=function(){},w.property=j,w.propertyOf=function(e){return null==e?function(){}:function(t){return e[t]}},w.matcher=w.matches=function(e){return e=w.extendOwn({},e),function(t){return w.isMatch(t,e)}},w.times=function(e,t,r){var n=Array(Math.max(0,e));t=x(t,r,1);for(var i=0;i<e;i++)n[i]=t(i);return n},w.random=function(e,t){return null==t&&(t=e,e=0),e+Math.floor(Math.random()*(t-e+1))},w.now=Date.now||function(){return(new Date).getTime()};var F={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},H=w.invert(F),N=function(e){var t=function(t){return e[t]},r="(?:"+w.keys(e).join("|")+")",n=RegExp(r),i=RegExp(r,"g");return function(e){return e=null==e?"":""+e,n.test(e)?e.replace(i,t):e}};w.escape=N(F),w.unescape=N(H),w.result=function(e,t,r){var n=null==e?void 0:e[t];return void 0===n&&(n=r),w.isFunction(n)?n.call(e):n};var C=0;w.uniqueId=function(e){var t=++C+"";return e?e+t:t},w.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var B=/(.)^/,T={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},V=/\\|'|\r|\n|\u2028|\u2029/g,q=function(e){return"\\"+T[e]};w.template=function(e,t,r){!t&&r&&(t=r),t=w.defaults({},t,w.templateSettings);var n=RegExp([(t.escape||B).source,(t.interpolate||B).source,(t.evaluate||B).source].join("|")+"|$","g"),i=0,s="__p+='";e.replace(n,function(t,r,n,o,a){return s+=e.slice(i,a).replace(V,q),i=a+t.length,r?s+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'":n?s+="'+\n((__t=("+n+"))==null?'':__t)+\n'":o&&(s+="';\n"+o+"\n__p+='"),t}),s+="';\n",t.variable||(s="with(obj||{}){\n"+s+"}\n"),s="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+s+"return __p;\n";try{var o=new Function(t.variable||"obj","_",s)}catch(e){throw e.source=s,e}var a=function(e){return o.call(this,e,w)},u=t.variable||"obj";return a.source="function("+u+"){\n"+s+"}",a},w.chain=function(e){var t=w(e);return t._chain=!0,t};var W=function(e,t){return e._chain?w(t).chain():t};w.mixin=function(e){w.each(w.functions(e),function(t){var r=w[t]=e[t];w.prototype[t]=function(){var e=[this._wrapped];return p.apply(e,arguments),W(this,r.apply(w,e))}})},w.mixin(w),w.each(["pop","push","reverse","shift","sort","splice","unshift"],function(e){var t=l[e];w.prototype[e]=function(){var r=this._wrapped;return t.apply(r,arguments),"shift"!==e&&"splice"!==e||0!==r.length||delete r[0],W(this,r)}}),w.each(["concat","join","slice"],function(e){var t=l[e];w.prototype[e]=function(){return W(this,t.apply(this._wrapped,arguments))}}),w.prototype.value=function(){return this._wrapped},w.prototype.valueOf=w.prototype.toJSON=w.prototype.value,w.prototype.toString=function(){return""+this._wrapped},void 0===(n=function(){return w}.apply(t,[]))||(e.exports=n)}).call(this)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class i{static getCallbacks(e,t){var r;return"function"!=typeof e&&"function"!=typeof t&&(r=new Promise(function(r,n){e=(e=>{r(e)}),t=(e=>{n(e)})})),{promise:r,success:e,error:t}}static buildPromise(e,t,r){var n=i.getCallbacks(t,r);return e(n.success,n.error),n.promise}}i._stringCompare=function(e,t){return e.toLowerCase()===t},i.isElement={_isElement:function(e,t){var r=e;return"string"!=typeof r&&e instanceof HTMLElement&&(r=e.tagName),i._stringCompare(r,t)},image:function(e){return i.isElement._isElement(e,"img")},anchor:function(e){return i.isElement._isElement(e,"a")}},i.promisesAllSettled=function(e){return i._mapPromises(e)},i._mapPromises=function(e,t=!1){var r=n.size(e),i=Array.isArray(e)?[]:{};return 0===r?Promise.resolve(i):new Promise(function(s,o){var a=!1,u=0,l=function(e,t,n=!1){if(!a){var o;o=n?{state:"rejected",reason:e}:{state:"fulfilled",value:e},i[t]=o,++u===r&&s(i)}};n.each(e,function(e,r){e.then(function(e){return l(e,r),Promise.resolve(e)},function(e){return t&&(o(e),a=!0),l(e,r,!0),Promise.reject(e)})})})},t.Utils=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),i=r(3),s=r(1),o=r(5),a={processOnLoad:!1,processOnResize:!1,loadingImageUrl:"",errorImageUrl:"",attributes:{loadingImage:"data-loading-image",errorImage:"data-error-image",dpi:"data-dpi",imageSource:"data-src",fileSource:"data-href",enableOffline:"data-offline",enableResponsive:"data-responsive"},responsiveParams:{}};class u extends i.EventEmitterExtended{constructor(e){super(),this.settings={urlTemplate:"[protocol][hostname][appid]/[operations][url]",server:"localhost:7071/1/"},this.options=n.extend({},a,e),this.options.attributes=n.extend({},a.attributes,e.attributes),this.options.responsiveParams=n.extend({},a.responsiveParams,e.responsiveParams),this.responsive=new o.HtmlHelperResponsiveModule(this),this._init()}_init(){this.options.processOnLoad&&window.addEventListener("load",this.processAll.bind(this),!1),this.options.processOnResize&&window.addEventListener("resize",n.debounce(this.processAll.bind(this),300),!1)}_triggerOnProcessed(e){this.emit("processed",e)}_defaultProcessSettings(e){return n.defaults({},e,{responsive:!0})}_setLoadingUrl(e){var t=e.getAttribute(this.options.attributes.loadingImage)||this.options.loadingImageUrl;return!t||s.Utils.isElement.anchor(e)?Promise.resolve():this._setUrl(e,t,!0)}_getBackgroundSrc(e){var t=window.getComputedStyle(e,null).getPropertyValue("background-image"),r="none"!==t&&t;return r&&(r=r.replace(/url\(('?"?)(.*?)\1\)/gi,"$2")),r}_setErrorUrl(e){var t=e.getAttribute(this.options.attributes.errorImage)||this.options.errorImageUrl;return!t||s.Utils.isElement.anchor(e)?Promise.resolve():this._setUrl(e,t,!0)}_setUrl(e,t,r=!1){var i=this;return new Promise(function(o,a){var u=i._getAttr(e);if(s.Utils.isElement.image(e)&&u===i.options.attributes.imageSource)if(r)e.src=t,e.style.visibility="visible";else{var l=new Image;l.onerror=function(){l=null,a(new Error(`Can't be loaded: ${t}`))},l.onload=function(){l=null,i._setUrl(e,t,!0).then(o).catch(a)},l.src=t}else if(r=!0,u){var c;c=u===i.options.attributes.imageSource?"src":n.last(u.split("-")),e.setAttribute(c,t)}else e.style.backgroundImage="url("+t+")";r&&o()})}_getAttr(e){if(e.getAttribute(this.options.attributes.imageSource))return this.options.attributes.imageSource}_getUrl(e){return e.getAttribute(this.options.attributes.imageSource)||this._getBackgroundSrc(e)}_wrapElements(e){var t=this;return n.map(e,function(e){var r=e.tagName.toLowerCase(),n=function(t){var r,n=(e.attributes[t]||{value:null}).value;if(""===n)r=!0;else if(n)try{r=JSON.parse(n)}catch(e){r=!0}else r=!1;return r}(t.options.attributes.enableResponsive);return{item:e,tag:r,operations:{responsive:n}}})}process(e,t,r,i){return s.Utils.buildPromise(r=>{t=this._defaultProcessSettings(t),e=n.isArray(e)||e instanceof NodeList||e.length?n.flatten(e):[e];var i=this._wrapElements(e),o=[];n.each(i,e=>{var r={element:e.item,responsive:!1,offline:!1},n=this._getUrl(r.element);if(!n)return o.push(Promise.resolve(r));var i=!!t.responsive&&e.operations.responsive;if(!i)return o.push(this._setUrl(r.element,n,!0).then(function(){return r}));var s=this._setLoadingUrl(r.element);i&&(s=s.then(()=>this.responsive.responsiveImage(e,n).then(function(e,t){if(t)return r[e]=!0,t}.bind(this,"responsive")))),s=s.then(e=>this._setUrl(r.element,e).then(()=>r)).catch(e=>this._setErrorUrl(r.element).then(()=>{throw{element:r.element,error:e}})),o.push(s)}),s.Utils.promisesAllSettled(o).then(e=>{var t=[],i=[];n.each(e,function(e){"fulfilled"===e.state?t.push(e.value):i.push(e.reason)});var s={processed:t,failed:i};this._triggerOnProcessed(s),r(s)})},r,i)}processAll(e,t,r){e=this._defaultProcessSettings(e);var i="["+this.options.attributes.enableResponsive+"]",s=[];e.responsive&&(s=document.querySelectorAll(i));var o=[].slice,a=n.unique(o.call(s).concat([]));return this.process(a,e,t,r)}}t.HtmlHelper=u,e.exports=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(4),i=r(0);class s{constructor(){this.canceled=!1}cancel(){this.canceled=!0}}t.EventEmitterExtended=class extends n.EventEmitter{emit(e,...t){return t.push(new s),super.emit(e,...t)}addListener(e,t){return super.addListener(e,(...e)=>{if(!i.last(e).canceled)return t.apply(this,e)}),this}prependOnceListener(e,t){if(this.once(e,t),!Array.isArray(this._events[e]))return this;const r=i.last(this._events[e]),n=i.without(this._events[e],r);return this._events[e]=[r].concat(n),this}once(e,t){return super.once(e,t),this}on(e,t){return this.addListener(e,t),this}off(e,t){return this.removeListener(e,t),this}}},function(e,t){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function n(e){return"function"==typeof e}function i(e){return"object"==typeof e&&null!==e}function s(e){return void 0===e}e.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(e){if(!function(e){return"number"==typeof e}(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},r.prototype.emit=function(e){var t,r,o,a,u,l;if(this._events||(this._events={}),"error"===e&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var c=new Error('Uncaught, unspecified "error" event. ('+t+")");throw c.context=t,c}if(r=this._events[e],s(r))return!1;if(n(r))switch(arguments.length){case 1:r.call(this);break;case 2:r.call(this,arguments[1]);break;case 3:r.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),r.apply(this,a)}else if(i(r))for(a=Array.prototype.slice.call(arguments,1),o=(l=r.slice()).length,u=0;u<o;u++)l[u].apply(this,a);return!0},r.prototype.addListener=function(e,t){var o;if(!n(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,n(t.listener)?t.listener:t),this._events[e]?i(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,i(this._events[e])&&!this._events[e].warned&&(o=s(this._maxListeners)?r.defaultMaxListeners:this._maxListeners)&&o>0&&this._events[e].length>o&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(e,t){function r(){this.removeListener(e,r),i||(i=!0,t.apply(this,arguments))}if(!n(t))throw TypeError("listener must be a function");var i=!1;return r.listener=t,this.on(e,r),this},r.prototype.removeListener=function(e,t){var r,s,o,a;if(!n(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(r=this._events[e],o=r.length,s=-1,r===t||n(r.listener)&&r.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(i(r)){for(a=o;a-- >0;)if(r[a]===t||r[a].listener&&r[a].listener===t){s=a;break}if(s<0)return this;1===r.length?(r.length=0,delete this._events[e]):r.splice(s,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},r.prototype.removeAllListeners=function(e){var t,r;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(r=this._events[e],n(r))this.removeListener(e,r);else if(r)for(;r.length;)this.removeListener(e,r[r.length-1]);return delete this._events[e],this},r.prototype.listeners=function(e){return this._events&&this._events[e]?n(this._events[e])?[this._events[e]]:this._events[e].slice():[]},r.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(n(t))return 1;if(t)return t.length}return 0},r.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),i=r(1),s={params:{resize:{}},isUserResize:!1};t.HtmlHelperResponsiveModule=class{constructor(e){this.htmlHelper=e}getBackgroundWidth(e){return Math.ceil(e.offsetWidth)}getBackgroundHeight(e){return Math.ceil(e.offsetHeight)}parseParamsString(e){if(!e||void 0===e||e.length<=1)return s;var t=e.split("/"),r={},i=!1;return n.chain(t).filter(function(e){return!!e}).each(function(e){var t=e.split("="),n=t[0],s=t[1];s=unescape(s.replace(/\+/g," ")),r[n]=s,"resize"===n&&(i=!0)}),{params:r,isUserResize:i}}getImgParams(e,t){var r,i=this,o=e.replace(/.*?resize=[^//]*\//gi,""),a=new RegExp("https?://","gi"),u=new RegExp(this.htmlHelper.settings.server,"gi"),l=new RegExp(this.htmlHelper.options.appId+"/","gi"),c=e.replace(o,"").replace(a,"").replace(u,"").replace(l,"").toLowerCase();if(""!==c){var f=c.indexOf("/")?c.substring(0,c.length-1):c;r=this.parseParamsString(f)}else t.dataset.responsiveParams?(r=s,n.each(t.dataset.responsiveParams.split(","),function(e){var t=e.split(":"),n=t[0],i=t[1];r.params.resize[n]=i})):r=s;return n.chain(this.htmlHelper.options.responsiveParams).keys().each(function(e){var t=i.htmlHelper.options.responsiveParams[e];r.params.resize[e]=t}),r.isUserResize&&(o=e),{imgUrl:o,operations:r.params,isUserResize:r.isUserResize}}hasClass(e,t){var r=new RegExp("(?:\\s|^)"+t+"(?:\\s|$)");return!!e.className.match(r)}getImageWidth(e){var t=e.parentNode;if(t){var r=t.offsetWidth,n=window.getComputedStyle(t,null),i=parseFloat(n.getPropertyValue("padding-left")),s=parseFloat(n.getPropertyValue("padding-right")),o=parseFloat(n.getPropertyValue("border-left-width")),a=parseFloat(n.getPropertyValue("border-right-width"));return Math.abs(r-Math.ceil(i+s+o+a))}return 0}getImageHeight(e){var t=e.parentNode;if(t){var r=t.offsetHeight,n=window.getComputedStyle(t,null),i=parseFloat(n.getPropertyValue("padding-top")),s=parseFloat(n.getPropertyValue("padding-bottom")),o=parseFloat(n.getPropertyValue("border-top-width")),a=parseFloat(n.getPropertyValue("border-bottom-width"));return Math.abs(r-Math.ceil(i+s+o+a))}return 0}getDevicePixelRatio(){return window.devicePixelRatio?window.devicePixelRatio:1}getPixelRatio(e){var t=e.getAttribute(this.htmlHelper.options.attributes.dpi)||"";return""!==t?!!n.isNumber(t)&&parseFloat(t):this.getDevicePixelRatio()}getImgParamsString(e){var t="resize=";return n.chain(e.resize).keys().each(function(r,n,i){t+=r+":"+e.resize[r],n<i.length-1?t+=",":t+="/"}),t}responsiveImage(e,t){var r,s=n.extend({},e),o=s.item,a=s.tag,u=i.Utils.isElement.image(a);(s=n.extend({},s,this.getImgParams(t,e.item))).isUserResize||(r=u?this.getImageWidth(o):this.getBackgroundWidth(o)),r=r||!1;var l=s.isUserResize?s.imgUrl:this.getImgSrc(s,r);return new Promise(function(e){return r||s.isUserResize?e(l):e()})}getImgSrc(e,t){var r=this.htmlHelper.options.scheme+"://",n=this.htmlHelper.options.appId,i=this.htmlHelper.settings.server,s=this.htmlHelper.settings.urlTemplate,o=this.getPixelRatio(e.item);s=(s=(s=s.replace("[protocol]",r)).replace("[appid]",n||"")).replace("[hostname]",i);var a,u=e.operations||!1;if(u){u.resize=u.resize||{},u.resize.w=t,u.resize.pd=o;var l=u.resize.fill;"cover"!==l&&"contain"!==l||(u.resize.h=this.getImageHeight(e.item)||this.getBackgroundHeight(e.item)),a=this.getImgParamsString(u)}else{var c={resize:{w:t,pd:o}};a=this.getImgParamsString(c)}return s=s.replace("[operations]",a),s=s.replace("[url]",e.imgUrl)}}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,